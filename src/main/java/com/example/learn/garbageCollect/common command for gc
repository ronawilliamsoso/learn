
  >jps 找到需要分析的那个 pid
 
  >jstat -gcutil  pid 5000 10
 
    5000 是每 5 秒监控一次
 
     S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT    CGC    CGCT     GCT
    0.00 100.00   0.00  94.85  79.18  65.84      1    0.002     0    0.000     2    0.002    0.004
    0.00 100.00   0.00  94.85  79.18  65.84      1    0.002     0    0.000     2    0.002    0.004
    0.00 100.00   0.00  94.85  79.18  65.84      1    0.002     0    0.000     2    0.002    0.004
    0.00 100.00   0.00  94.85  79.18  65.84      1    0.002     0    0.000     2    0.002    0.004
    0.00 100.00   0.00  94.85  79.18  65.84      1    0.002     0    0.000     2    0.002    0.004
    0.00 100.00   0.00  94.85  79.18  65.84      1    0.002     0    0.000     2    0.002    0.004
    0.00 100.00   0.00  94.85  79.18  65.84      1    0.002     0    0.000     2    0.002    0.004
    0.00 100.00   0.00  94.85  79.18  65.84      1    0.002     0    0.000     2    0.002    0.004
    0.00 100.00   0.00  94.85  79.18  65.84      1    0.002     0    0.000     2    0.002    0.004
 
  S0: 新生代中Survivor space 0区已使用空间的百分比
  S1: 新生代中Survivor space 1区已使用空间的百分比
  E: 新生代已使用空间的百分比
  O: 老年代已使用空间的百分比
  YGC: 从应用程序启动到当前，发生Yang GC 的次数
  YGCT: 从应用程序启动到当前，Yang GC所用的时间【单位秒】
  FGC: 从应用程序启动到当前，发生Full GC的次数
  FGCT: 从应用程序启动到当前，Full GC所用的时间
  GCT: 从应用程序启动到当前，用于垃圾回收的总时间【单位秒】
 
 
 
 
   获取 heap 占用情况
  > jmap -histo 69970
 
  num    #instances(数量) #bytes（占内存）class name (module)
  -------------------------------------------------------
   1:          2039     1843350976  [B (java.base@11.0.2)
   2:           205         548104  [I (java.base@11.0.2)
   3:           549          66472  java.lang.Class (java.base@11.0.2)
   4:          1621          51872  java.util.HashMap$Node (java.base@11.0.2)
   5:          1952          46848  java.lang.String (java.base@11.0.2)
   6:           446          43760  [Ljava.lang.Object; (java.base@11.0.2)
 
 
    查看程序的JVM扩展参数
   > jinfo -flags 69970
 
   -XX:CICompilerCount=4 -XX:ConcGCThreads=2 -XX:G1ConcRefinementThreads=8 -XX:G1HeapRegionSize=1048576 -XX:GCDrainStackTargetSize=64
   -XX:InitialHeapSize=268435456 -XX:MarkStackSize=4194304 -XX:MaxHeapSize=4294967296 -XX:MaxNewSize=2576351232 -XX:MinHeapDeltaBytes=1048576
   -XX:NonNMethodCodeHeapSize=5835340 -XX:NonProfiledCodeHeapSize=122911450 -XX:ProfiledCodeHeapSize=122911450 -XX:ReservedCodeCacheSize=251658240
   -XX:+SegmentedCodeCache -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC
 
 
   垃圾回收统计,最常用
 > jstat -gc 69970
   S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC  YGCT    FGC    FGCT    CGC    CGCT     GCT
   0.0   1024.0  0.0   1024.0 163840.0   0.0    1897472.0  1799767.5  4864.0 3850.5 512.0  337.1    1    0.002   0     0.000   2      0.001    0.003
 
  S0C：第一个幸存区的大小
  S1C：第二个幸存区的大小
  S0U：第一个幸存区的使用大小
  S1U：第二个幸存区的使用大小
  EC：伊甸园区的大小
  EU：伊甸园区的使用大小
  OC：老年代大小
  OU：老年代使用大小
  MC：方法区大小(元空间)
  MU：方法区使用大小
  CCSC:压缩类空间大小
  CCSU:压缩类空间使用大小
  YGC：年轻代垃圾回收次数
  YGCT：年轻代垃圾回收消耗时间，单位s
  FGC：老年代垃圾回收次数
  FGCT：老年代垃圾回收消耗时间，单位s
  GCT：垃圾回收消耗总时间，单位s
 
 
  新生代垃圾回收统计
  >jstat -gcnew 69970
     S0C  S1C      S0U    S1U    TT  MTT  DSS      EC       EU     YGC     YGCT
     0.0 1024.0    0.0   1024.0  15  15  1536.0  163840.0   0.0      1    0.002
  S0C：第一个幸存区的大小
  S1C：第二个幸存区的大小
  S0U：第一个幸存区的使用大小
  S1U：第二个幸存区的使用大小
  TT:对象在新生代存活的次数
  MTT:对象在新生代存活的最大次数
  DSS:期望的幸存区大小
  EC：伊甸园区的大小
  EU：伊甸园区的使用大小
  YGC：年轻代垃圾回收次数
  YGCT：年轻代垃圾回收消耗时间
 
 
 新生代内存统计
  >jstat -gcnewcapacity 69970
 
  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC   CGC
   0.0  4194304.0   164864.0      0.0      0.0 4194304.0   1024.0  4194304.0   163840.0     1     0     2
 
  NGCMN：新生代最小容量
  NGCMX：新生代最大容量
  NGC：当前新生代容量
  S0CMX：最大幸存1区大小
  S0C：当前幸存1区大小
  S1CMX：最大幸存2区大小
  S1C：当前幸存2区大小
  ECMX：最大伊甸园区大小
  EC：当前伊甸园区大小
  YGC：年轻代垃圾回收次数
  FGC：老年代回收次数
 
 
  >jstat -gcold 69970
  MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT    CGC    CGCT     GCT
  4864.0   3850.5    512.0    337.1   1897472.0   1799767.5      1     0    0.000     2    0.001    0.003
 
 
  MC：方法区大小
  MU：方法区使用大小
  CCSC:压缩类空间大小
  CCSU:压缩类空间使用大小
  OC：老年代大小
  OU：老年代使用大小
  YGC：年轻代垃圾回收次数
  FGC：老年代垃圾回收次数
  FGCT：老年代垃圾回收消耗时间
  GCT：垃圾回收消耗总时间
 
 
  老年代内存统计
  jstat -gcoldcapacity 69970
   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT    CGC    CGCT     GCT
   0.0      4194304.0   1897472.0   1897472.0     1     0    0.000     2    0.001    0.003
 
  OGCMN：老年代最小容量
  OGCMX：老年代最大容量
  OGC：当前老年代大小
  OC：老年代大小
  YGC：年轻代垃圾回收次数
  FGC：老年代垃圾回收次数
  FGCT：老年代垃圾回收消耗时间
  GCT：垃圾回收消耗总时间
 
 
  元空间内存统计
  jstat -gcmetacapacity 69970
 
  MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT    CGC    CGCT     GCT
    0.0    1056768.0     4864.0        0.0  1048576.0      512.0     1     0    0.000     2    0.001    0.003
 MCMN:最小元数据容量
  MCMX：最大元数据容量
  MC：当前元数据空间大小
  CCSMN：最小压缩类空间大小
  CCSMX：最大压缩类空间大小
  CCSC：当前压缩类空间大小
  YGC：年轻代垃圾回收次数
  FGC：老年代垃圾回收次数
  FGCT：老年代垃圾回收消耗时间
  GCT：垃圾回收消耗总时间
 
 
  用于观察各代的变化情况
  jstat -gc 70877 2000 10



  CMS收集器
   -XX:+UseConcMarkSweepGC(old)  -XX:+UseParNewGC
   CMS的相关参数
   1.	-XX:+UseConcMarkSweepGC 启用cms 
   2.	-XX:ConcGCThreads:并发的GC线程数（并非STW时间，而是和服务一起执行的线程数）
   3.	-XX:+UseCMSCompactAtFullCollection:FullGC之后做压缩（减少碎片）
   4.	-XX:CMSFullGCsBeforeCompaction:多少次FullGC之后压缩一次（因压缩非常的消耗时间，所以不能每次FullGC都做）
   5.	-XX:CMSInitiatingOccupancyFraction:触发FulGC条件（默认是92）
   6.	-XX:+UseCMSInitiatingOccupancyOnly:是否动态调节


   G1收集器
    -XX:+UseG1GC


    JVM调优主要就是调整下面两个指标
    停顿时间:  垃圾收集器做垃圾回收中断应用执行的时间。  -XX:MaxGCPauseMillis
    吞吐量：垃圾收集的时间和总时间的占比：1/(1+n)，吞吐量为1-1/(1+n) 。   -XX:GCTimeRatio=n


    -XX:+PrintGCDetails  -XX:+UseSerialGC -Xloggc:/Users/wangwei/Documents/workspace/learning/demo/serialgc.log


    增大元空间
    -XX:MetaspaceSize=64M  -XX:MaxMetaspaceSize=64M

    年轻代动态扩容增幅扩大（原比例是 20%）
    XX:YoungGenerationSizeIncrement=30



G1调优相关
1.	常用参数
a)	-XX:+UseG1GC 开启G1
b)	-XX:G1HeapRegionSize=n,region的大小，1-32M，2048个
c)	-XX:MaxGCPauseMillis=200 最大停顿时间
d)	-XX:G1NewSizePercent   -XX:G1MaxNewSizePercent
e)	-XX:G1ReservePercent=10 保留防止to space溢出（）
f)	-XX:ParallelGCThreads=n SWT线程数（停止应用程序）
g)	-XX:ConcGCThreads=n 并发线程数=1/4*并行
h)   -XX:MaxGCPauseMillis   可以放在启动参数里 设定一个目标，让 g1 自己去做到
i)   -XX:GCTimeRatio        可以放在启动参数里 设定一个目标，让 g1 自己去做到
2.	最佳实践
a)	年轻代大小：避免使用-Xmn、-XX:NewRatio等显示设置Young区大小，会覆盖暂停时间目标（常用参数3）
b)	暂停时间目标：暂停时间不要太严苛，其吞吐量目标是90%的应用程序时间和10%的垃圾回收时间，太严苛会直接影响到吞吐量
3.	是否需要切换到G1
a)	50%以上的堆被存活对象占用
b)	对象分配和晋升的速度变化非常大
c)	垃圾回收时间特别长，超过1秒
4.	G1调优目标
a)	6GB以上内存
b)	停顿时间是500ms以内
c)	吞吐量是90%以上

GC常用参数
堆栈设置
  -Xss:每个线程的栈大小
  -Xms:初始堆大小，默认物理内存的1/64
  -Xmx:最大堆大小，默认物理内存的1/4
  -Xmn:新生代大小
  -XX:NewSize:设置新生代初始大小
  -XX:NewRatio:默认2表示新生代占年老代的1/2，占整个堆内存的1/3。
  -XX:SurvivorRatio:默认8表示一个survivor区占用1/8的Eden内存，即1/10的新生代内存。
 -XX:MetaspaceSize:设置元空间大小
  -XX:MaxMetaspaceSize:设置元空间最大允许大小，默认不受限制，JVM Metaspace会进行动态扩展。
垃圾回收统计信息
  -XX:+PrintGC
  -XX:+PrintGCDetails
  -XX:+PrintGCTimeStamps
  -Xloggc:filename
收集器设置
  -XX:+UseSerialGC:设置串行收集器
  -XX:+UseParallelGC:设置并行收集器
  -XX:+UseParallelOldGC:老年代使用并行回收收集器
  -XX:+UseParNewGC:在新生代使用并行收集器
  -XX:+UseParalledlOldGC:设置并行老年代收集器
  -XX:+UseConcMarkSweepGC:设置CMS并发收集器
  -XX:+UseG1GC:设置G1收集器
  -XX:ParallelGCThreads:设置用于垃圾回收的线程数
并行收集器设置
  -XX:ParallelGCThreads:设置并行收集器收集时使用的CPU数。并行收集线程数。
  -XX:MaxGCPauseMillis:设置并行收集最大暂停时间
  -XX:GCTimeRatio:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)
  -XX:YoungGenerationSizeIncrement：年轻代gc后扩容比例，默认是20(%)
CMS收集器设置
  -XX:+UseConcMarkSweepGC:设置CMS并发收集器
  -XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。
  -XX:ParallelGCThreads:设置并发收集器新生代收集方式为并行收集时，使用的CPU数。并行收集线程数。
  -XX:CMSFullGCsBeforeCompaction:设定进行多少次CMS垃圾回收后，进行一次内存压缩
  -XX:+CMSClassUnloadingEnabled:允许对类元数据进行回收
  -XX:UseCMSInitiatingOccupancyOnly:表示只在到达阀值的时候，才进行CMS回收
  -XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况
  -XX:ParallelCMSThreads:设定CMS的线程数量
  -XX:CMSInitiatingOccupancyFraction:设置CMS收集器在老年代空间被使用多少后触发
  -XX:+UseCMSCompactAtFullCollection:设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片的整理
G1收集器设置
  -XX:+UseG1GC:使用G1收集器
  -XX:ParallelGCThreads:指定GC工作的线程数量
  -XX:G1HeapRegionSize:指定分区大小(1MB~32MB，且必须是2的幂)，默认将整堆划分为2048个分区
  -XX:GCTimeRatio:吞吐量大小，0-100的整数(默认9)，值为n则系统将花费不超过1/(1+n)的时间用于垃圾收集
  -XX:MaxGCPauseMillis:目标暂停时间(默认200ms)
  -XX:G1NewSizePercent:新生代内存初始空间(默认整堆5%)
  -XX:G1MaxNewSizePercent:新生代内存最大空间
  -XX:TargetSurvivorRatio:Survivor填充容量(默认50%)
  -XX:MaxTenuringThreshold:最大任期阈值(默认15)
  -XX:InitiatingHeapOccupancyPercen:老年代占用空间超过整堆比IHOP阈值(默认45%),超过则执行混合收集
  -XX:G1HeapWastePercent:堆废物百分比(默认5%)
  -XX:G1MixedGCCountTarget:参数混合周期的最大总次数(默认8)



